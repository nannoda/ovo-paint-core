{
  "version": 3,
  "sources": ["src/submodules/common-ts-utils/WebWorker/CreateWorker.ts", "src/Documents/DocNodes/AbstractDocNode.ts", "src/Documents/DocNodes/BitmapLayer.ts", "src/Documents/DocNodes/WorkerCanvas.ts", "src/Main.ts"],
  "sourcesContent": ["export function createWorkerFromFunction(workerFunction: () => void): Worker {\n    checkCompatibility();\n    const blob = new Blob(['(' + workerFunction.toString() + ')()'], {type: 'application/javascript'});\n    return new Worker(URL.createObjectURL(blob));\n}\n\nfunction checkCompatibility() {\n    if (window.Worker === undefined) {\n        throw new Error(\"Your browser does not support Web Workers.\");\n    }\n}\n", "export abstract class AbstractDocNode {\n    private _name: string;\n    protected abstract _content: CanvasImageSource;\n\n    isDirty: boolean = true;\n\n    offset: Vec2;\n\n    protected constructor(size: Vec2, name: string = \"Untitled\", offset: Vec2 = [0, 0]) {\n        this._name = name;\n        this.offset = offset;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    set name(name: string) {\n        this._name = name;\n    }\n\n    /**\n     * Get the image source that represents the rendered content of this node.\n     */\n    get content(): CanvasImageSource {\n        return this._content;\n    }\n\n    /**\n     * Render the content of this node to the render canvas.\n     */\n    render(): void {\n        if (!this.isDirty) {\n            return;\n        }\n        this.forceRender();\n    }\n\n    /**\n     * Force the node to render its content to the render canvas.\n     * Doesn't check if the node is dirty.\n     */\n    forceRender(): void {\n\n    }\n\n    abstract get width(): number ;\n\n    abstract get height(): number ;\n}\n", "import {createWorkerFromFunction} from \"../../submodules/common-ts-utils/WebWorker/CreateWorker\";\nimport {AbstractDocNode} from \"./AbstractDocNode\";\n\nfunction layerWorkerCode() {\n    let canvas: OffscreenCanvas;\n    let ctx: OffscreenCanvasRenderingContext2D;\n\n    function drawDot(pos: Vec2) {\n\n        ctx.fillStyle = \"#000000\";\n        ctx.beginPath();\n        ctx.arc(pos[0], pos[1], 5, 0, 2 * Math.PI);\n        ctx.fill();\n        console.log(\"drawDot\")\n    }\n\n    //\n    // function updateBitmap(){\n    //     let bitmap = canvas.transferToImageBitmap();\n    //     self.postMessage({\n    //         key: \"updateBitmap\",\n    //         data: bitmap,\n    //     })\n    //     ctx.drawImage(bitmap, 0, 0)\n    // }\n\n    self.onmessage = (e) => {\n        let data = e.data as LayerWorkerEvent;\n        switch (data.key) {\n            case \"setCanvas\":\n                canvas = data.data as OffscreenCanvas;\n                console.log(canvas)\n                ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D;\n                break;\n            case \"drawDot\":\n                drawDot(data.data as Vec2)\n                break;\n            default:\n                console.log(\"Unknown event key: \" + data.key);\n        }\n    }\n}\n\ntype layerEventKey = \"setCanvas\" | \"drawDot\"\n\ninterface LayerWorkerEvent {\n    key: layerEventKey;\n    data: any;\n}\n\n\nexport class BitmapLayer extends AbstractDocNode {\n    protected _worker: Worker;\n    protected _size: Vec2;\n    protected _offset: Vec2;\n    protected _content: CanvasImageSource;\n\n    postMessage(e: LayerWorkerEvent, transfer?: Transferable[]) {\n        if (transfer !== undefined) {\n            (async () => {\n                this._worker.postMessage(e, transfer);\n            })()\n            return;\n        }\n        (async () => {\n            this._worker.postMessage(e);\n        })()\n    }\n\n    constructor(size: Vec2, offset: Vec2 = [0, 0]) {\n        super(size, \"BitmapLayer\", offset);\n        this._size = size;\n        this._offset = offset;\n\n        this._worker = createWorkerFromFunction(layerWorkerCode);\n        this._content = document.createElement(\"canvas\");\n        this._content.width = size[0];\n        this._content.height = size[1];\n\n        let canvas = this._content.transferControlToOffscreen();\n\n        this.postMessage(\n            {\n                key: \"setCanvas\",\n                data: canvas\n            }, [canvas]\n        );\n    }\n\n    drawDot(pos: Vec2) {\n        this.postMessage({\n            key: \"drawDot\",\n            data: pos\n        });\n    }\n\n\n    get height(): number {\n        return 0;\n    }\n\n    get width(): number {\n        return 0;\n    }\n}", "import {createWorkerFromFunction} from \"../../submodules/common-ts-utils/WebWorker/CreateWorker\";\n\nfunction workerCode() {\n\n    function error(msg: string) {\n        console.log(\"Worker Error: \" + msg);\n    }\n\n    let canvas: OffscreenCanvas;\n    let ctx: OffscreenCanvasRenderingContext2D;\n    let initialized = false;\n    onmessage = function (e) {\n        if (!e.data.key) {\n            error(\"No key in message\");\n            return;\n        }\n        let data = e.data as CanvasWorkerEvent;\n\n        if (!initialized && data.key !== \"init\") {\n            error(\"Canvas Worker not initialized\");\n            return;\n        }\n\n        switch (data.key) {\n            case \"init\":\n                canvas = data.args[0] as OffscreenCanvas;\n                ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D;\n                initialized = true;\n                break;\n            case \"canvasOp\":\n                let canvasMethod = data.args[0];\n                let canvasArgs = data.args[1] as any[];\n                if (!(canvasMethod in canvas))\n                    error(\"Unknown canvas method: \" + canvasMethod);\n                try {\n                    (canvas as any)[canvasMethod](...canvasArgs);\n                } catch (e) {\n                    error(\"Error in canvas method: \" + canvasMethod);\n                    console.error(e)\n                }\n                break;\n            case \"ctxOp\":\n                let ctxMethod = data.args[0];\n                let ctxArgs = data.args[1] as any[];\n                if (!(ctxMethod in ctx))\n                    error(\"Unknown ctx method: \" + ctxMethod);\n                try {\n                    (ctx as any)[ctxMethod](...ctxArgs);\n                } catch (e) {\n                    error(\"Error in ctx method: \" + ctxMethod);\n                    console.error(e)\n                }\n                break;\n            case \"canvasVar\":\n                let canvasVar = data.args[0];\n                let canvasVarValue = data.args[1];\n                if (!(canvasVar in canvas))\n                    error(\"Unknown canvas var: \" + canvasVar);\n                (canvas as any)[canvasVar] = canvasVarValue;\n                break;\n            case \"ctxVar\":\n                let ctxVar = data.args[0];\n                let ctxVarValue = data.args[1];\n                if (!(ctxVar in ctx))\n                    error(\"Unknown ctx var: \" + ctxVar);\n                (ctx as any)[ctxVar] = ctxVarValue;\n                break;\n            default:\n                console.log(\"Unknown event key: \" + data.key);\n        }\n    }\n}\n\ntype CanvasWorkerEventKey = \"init\" | \"canvasOp\" | \"ctxOp\" | \"canvasVar\" | \"ctxVar\";\n\ninterface CanvasWorkerEvent {\n    key: CanvasWorkerEventKey;\n    args: any[];\n}\n\nexport class WorkerCanvas {\n    protected _canvas: HTMLCanvasElement;\n    protected _worker: Worker;\n\n    protected _lineCap: CanvasLineCap = \"butt\";\n    protected _lineJoin: CanvasLineJoin = \"miter\";\n    protected _lineWidth: number = 1;\n    protected _strokeStyle: string | CanvasGradient | CanvasPattern = \"#000000\";\n    protected _fillStyle: string | CanvasGradient | CanvasPattern = \"#000000\";\n\n    protected _font: string = \"10px sans-serif\";\n\n    get font(): string {\n        return this._font;\n    }\n\n    set font(value: string) {\n        this._font = value;\n        this.sendCommand(\"ctxVar\", [\"font\", value]);\n    }\n\n    protected _textAlign: CanvasTextAlign = \"start\";\n\n    get textAlign(): CanvasTextAlign {\n        return this._textAlign;\n    }\n\n    set textAlign(value: CanvasTextAlign) {\n        this._textAlign = value;\n        this.sendCommand(\"ctxVar\", [\"textAlign\", value]);\n    }\n\n    protected _textBaseline: CanvasTextBaseline = \"alphabetic\";\n\n    get textBaseline(): CanvasTextBaseline {\n        return this._textBaseline;\n    }\n\n    set textBaseline(value: CanvasTextBaseline) {\n        this._textBaseline = value;\n        this.sendCommand(\"ctxVar\", [\"textBaseline\", value]);\n    }\n\n    protected _globalAlpha: number = 1;\n\n    get globalAlpha(): number {\n        return this._globalAlpha;\n    }\n\n    set globalAlpha(value: number) {\n        this._globalAlpha = value;\n        this.sendCommand(\"ctxVar\", [\"globalAlpha\", value]);\n    }\n\n    protected _globalCompositeOperation: GlobalCompositeOperation = \"source-over\";\n\n    get globalCompositeOperation(): GlobalCompositeOperation {\n        return this._globalCompositeOperation;\n    }\n\n    set globalCompositeOperation(value: GlobalCompositeOperation) {\n        this._globalCompositeOperation = value;\n        this.sendCommand(\"ctxVar\", [\"globalCompositeOperation\", value]);\n    }\n\n    protected _shadowBlur: number = 0;\n\n    get shadowBlur(): number {\n        return this._shadowBlur;\n    }\n\n    set shadowBlur(value: number) {\n        this._shadowBlur = value;\n        this.sendCommand(\"ctxVar\", [\"shadowBlur\", value]);\n    }\n\n    protected _shadowColor: string = \"rgba(0, 0, 0, 0)\";\n\n    get shadowColor(): string {\n        return this._shadowColor;\n    }\n\n    set shadowColor(value: string) {\n        this._shadowColor = value;\n        this.sendCommand(\"ctxVar\", [\"shadowColor\", value]);\n    }\n\n\n    protected _shadowOffsetX: number = 0;\n\n    get shadowOffsetX(): number {\n        return this._shadowOffsetX;\n    }\n\n    set shadowOffsetX(value: number) {\n        this._shadowOffsetX = value;\n        this.sendCommand(\"ctxVar\", [\"shadowOffsetX\", value]);\n    }\n\n    protected _shadowOffsetY: number = 0;\n\n    get shadowOffsetY(): number {\n        return this._shadowOffsetY;\n    }\n\n    set shadowOffsetY(value: number) {\n        this._shadowOffsetY = value;\n        this.sendCommand(\"ctxVar\", [\"shadowOffsetY\", value]);\n    }\n\n    protected _imageSmoothingEnabled: boolean = true;\n\n    get imageSmoothingEnabled(): boolean {\n        return this._imageSmoothingEnabled;\n    }\n\n    set imageSmoothingEnabled(value: boolean) {\n        this._imageSmoothingEnabled = value;\n        this.sendCommand(\"ctxVar\", [\"imageSmoothingEnabled\", value]);\n    }\n\n    protected _imageSmoothingQuality: ImageSmoothingQuality = \"low\";\n\n    get imageSmoothingQuality(): ImageSmoothingQuality {\n        return this._imageSmoothingQuality;\n    }\n\n    set imageSmoothingQuality(value: ImageSmoothingQuality) {\n        this._imageSmoothingQuality = value;\n        this.sendCommand(\"ctxVar\", [\"imageSmoothingQuality\", value]);\n    }\n\n    protected _filter: string = \"none\";\n\n    get filter(): string {\n        return this._filter;\n    }\n\n    set filter(value: string) {\n        this._filter = value;\n        this.sendCommand(\"ctxVar\", [\"filter\", value]);\n    }\n\n    protected _width: number;\n    protected _height: number;\n\n    get width(): number {\n        return this._width;\n\n    }\n\n    set width(value: number) {\n        this._width = value;\n        this.sendCommand(\"canvasVar\", [\"width\", value]);\n    }\n\n    get height(): number {\n        return this._height;\n    }\n\n    set height(value: number) {\n        this._height = value;\n        this.sendCommand(\"canvasVar\", [\"height\", value]);\n    }\n\n    get lineCap(): CanvasLineCap {\n        return this._lineCap;\n    }\n\n    set lineCap(value: CanvasLineCap) {\n        this._lineCap = value;\n        this.sendCommand(\"ctxVar\", [\"lineCap\", value]);\n    }\n\n    get lineJoin(): CanvasLineJoin {\n        return this._lineJoin;\n    }\n\n    set lineJoin(value: CanvasLineJoin) {\n        this._lineJoin = value;\n        this.sendCommand(\"ctxVar\", [\"lineJoin\", value]);\n    }\n\n    get lineWidth(): number {\n        return this._lineWidth;\n    }\n\n    set lineWidth(value: number) {\n        this._lineWidth = value;\n        this.sendCommand(\"ctxVar\", [\"lineWidth\", value]);\n    }\n\n    get strokeStyle(): string | CanvasGradient | CanvasPattern {\n        return this._strokeStyle;\n    }\n\n    set strokeStyle(value: string | CanvasGradient | CanvasPattern) {\n        this._strokeStyle = value;\n        this.sendCommand(\"ctxVar\", [\"strokeStyle\", value]);\n    }\n\n    get fillStyle(): string | CanvasGradient | CanvasPattern {\n        return this._fillStyle;\n    }\n\n    set fillStyle(value: string | CanvasGradient | CanvasPattern) {\n        this._fillStyle = value;\n        this.sendCommand(\"ctxVar\", [\"fillStyle\", value]);\n    }\n\n    get content(): CanvasImageSource {\n        return this._canvas;\n    }\n\n    moveTo(x: number, y: number) {\n        this.sendCommand(\"ctxOp\", [\"moveTo\", [x, y]]);\n    }\n\n    lineTo(x: number, y: number) {\n        this.sendCommand(\"ctxOp\", [\"lineTo\", [x, y]]);\n    }\n\n    curveTo(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) {\n        this.sendCommand(\"ctxOp\", [\"bezierCurveTo\", [x1, y1, x2, y2, x3, y3]]);\n    }\n\n    stroke() {\n        this.sendCommand(\"ctxOp\", [\"stroke\", []]);\n    }\n\n    fill() {\n        this.sendCommand(\"ctxOp\", [\"fill\", []]);\n    }\n\n    clearRect(x: number, y: number, width: number, height: number) {\n        this.sendCommand(\"ctxOp\", [\"clearRect\", [x, y, width, height]]);\n    }\n\n    fillRect(x: number, y: number, width: number, height: number) {\n        this.sendCommand(\"ctxOp\", [\"fillRect\", [x, y, width, height]]);\n    }\n\n    strokeRect(x: number, y: number, width: number, height: number) {\n        this.sendCommand(\"ctxOp\", [\"strokeRect\", [x, y, width, height]]);\n    }\n\n    beginPath() {\n        this.sendCommand(\"ctxOp\", [\"beginPath\", []]);\n    }\n\n    closePath() {\n        this.sendCommand(\"ctxOp\", [\"closePath\", []]);\n    }\n\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean) {\n        this.sendCommand(\"ctxOp\", [\"arc\", [x, y, radius, startAngle, endAngle, anticlockwise]]);\n    }\n\n\n    onResponse(e: MessageEvent) {\n\n    }\n\n    sendCommand(key: CanvasWorkerEventKey, args: any) {\n        (\n            async () => {\n                this._worker.postMessage({\n                    key: key,\n                    args: args,\n                })\n            }\n        )()\n    }\n\n    constructor(width: number, height: number) {\n        let canvas = document.createElement(\"canvas\");\n        canvas.width = width;\n        canvas.height = height;\n        // document.body.appendChild(canvas);\n        let worker = createWorkerFromFunction(workerCode);\n        worker.onmessage = (e) => {\n            this.onResponse(e);\n        }\n        let workerCanvas = canvas.transferControlToOffscreen();\n        worker.postMessage(\n            {\n                key: \"init\",\n                args: [workerCanvas]\n            },\n            [workerCanvas]\n        )\n        this._canvas = canvas;\n        this._worker = worker;\n\n        this._width = width;\n        this._height = height;\n\n        this.lineCap = \"round\";\n        this.lineJoin = \"round\";\n        this.lineWidth = 2;\n        this.strokeStyle = \"#000000\";\n    }\n}", "import {workerFunction} from \"./Worker\";\nimport {createWorkerFromFunction} from \"./submodules/common-ts-utils/WebWorker/CreateWorker\";\nimport {\n    CanvasUpdateEvent,\n    docManagerWorker,\n    DocWorkerEvent, ToolOpEvent,\n    ToolUpdateEvent\n} from \"./Documents/DocManager/DocManagerWorker\";\nimport {DotPen} from \"./PaintTools/DotPen\";\nimport {BitmapLayer} from \"./Documents/DocNodes/BitmapLayer\";\nimport {WorkerCanvas} from \"./Documents/DocNodes/WorkerCanvas\";\n\nconsole.log(\"Main.ts\");\n\n\nfunction main() {\n    let htmlCanvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n\n    let size:Vec2 = [4000, 4000];\n    let layer = new BitmapLayer(size);\n    htmlCanvas.width = size[0];\n    htmlCanvas.height = size[1];\n\n    if( localStorage.getItem(\"USER_SIGNATURE\") === null) {\n        console.log(\"Setting user signature\");\n        let signature = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n        localStorage.setItem(\"USER_SIGNATURE\", signature);\n    }else{\n        console.log(\"User signature already set\");\n        console.log(localStorage.getItem(\"USER_SIGNATURE\"));\n    }\n    let signature = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    console.log(signature);\n    (self as any).test = {\n        \"Test\": \"Test\"\n    }\n    self.eval(\"console.log(test)\");\n    (self as any).test = undefined;\n    self.eval(\"console.log(test)\");\n\n    let workerCanvas = new WorkerCanvas(size[0], size[1]);\n\n\n    let ctx = htmlCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n    function frameUpdate() {\n        ctx.clearRect(0, 0, htmlCanvas.width, htmlCanvas.height);\n        // ctx.drawImage(layer.content, 0, 0);\n        ctx.drawImage(workerCanvas.content, 0, 0);\n        // ctx.drawImage(layer.content, 0, 0);\n        // ctx.drawImage(layer.content, 0, 0);\n        // ctx.drawImage(layer.content, 0, 0);\n        requestAnimationFrame(frameUpdate);\n    }\n    frameUpdate();\n    htmlCanvas.onpointermove = (event) => {\n        // console.log( \"pointermove\")\n        workerCanvas.fillStyle = \"#000000\";\n        workerCanvas.beginPath();\n        workerCanvas.arc(event.offsetX, event.offsetY, 5, 0, 2 * Math.PI);\n\n        workerCanvas.fill();\n\n    }\n\n\n    // let offscreenCanvas = htmlCanvas.transferControlToOffscreen();\n    //\n    // let worker = createWorkerFromFunction(docManagerWorker);\n    // worker.onmessage = (event) => {\n    //     console.log(\"Main.ts got message: \" + event.data);\n    // }\n    // let canvasEvent: CanvasUpdateEvent = {\n    //     canvas: offscreenCanvas\n    // }\n    //\n    // let docWorkerEvent: DocWorkerEvent = {\n    //     key: \"setCanvas\",\n    //     data: canvasEvent\n    // }\n    //\n    // worker.addEventListener(\"message\", (event) => {\n    //     console.log(\"Main.ts got message: \");\n    //     console.log(event.data);\n    //     console.log(event.origin);\n    // });\n    //\n    //\n    //\n    // worker.postMessage(docWorkerEvent, [offscreenCanvas]);\n    //\n    // function objectToStr(obj: any): string {\n    //     return obj[\"constructor\"].toString();\n    // }\n    //\n    // let pen = new DotPen();\n    //\n    // let penConstructorStr = objectToStr(pen);\n    //\n    // let toolEvent: ToolUpdateEvent = {\n    //     tool: penConstructorStr\n    // }\n    //\n    // console.log(penConstructorStr);\n    //\n    // docWorkerEvent = {\n    //     key: \"setTool\",\n    //     data: toolEvent\n    // }\n    //\n    // worker.postMessage(docWorkerEvent);\n    //\n    // docWorkerEvent = {\n    //     key: \"log\",\n    //     data: \"nothing\"\n    // }\n    // worker.postMessage(docWorkerEvent)\n    //\n    // function methodsToStringDict(method: any) {\n    //     let dict: any = {};\n    //     for (let key of Object.getOwnPropertyNames(Object.getPrototypeOf(method))) {\n    //         dict[key] = method[key].toString();\n    //     }\n    //     return dict;\n    // }\n    //\n    // // get all methods from pen\n    // let penDict = methodsToStringDict(pen);\n    // let methods = Object.getOwnPropertyNames(Object.getPrototypeOf(pen));\n    //\n    // console.log(pen[\"onMove\"].toString())\n    // console.log(penDict);\n    //\n    //\n    // htmlCanvas.addEventListener(\"pointermove\", (event) => {\n    //     let toolOpEvent: ToolOpEvent = {\n    //         event: {\n    //             pos: [event.offsetX, event.offsetY],\n    //             button: event.button,\n    //             type: \"move\",\n    //             pressure: event.pressure\n    //         }\n    //     }\n    //\n    //     docWorkerEvent = {\n    //         key: \"toolOp\",\n    //         data: toolOpEvent\n    //     }\n    //\n    //     worker.postMessage(docWorkerEvent);\n    // })\n    // docWorkerEvent = {\n    //     key: \"returnBitmap\",\n    //     data: \"nothing\"\n    // }\n    //\n    // worker.postMessage(docWorkerEvent)\n    //\n    // worker.addEventListener(\"message\", (event) => {\n    //     console.log(\"Main.ts got message: \");\n    //     if (event.data instanceof ImageBitmap) {\n    //         console.log(\"Main.ts got ImageBitmap\");\n    //         let newCanvas = document.createElement(\"canvas\");\n    //         newCanvas.width = event.data.width;\n    //         newCanvas.height = event.data.height;\n    //         let ctx = newCanvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //         ctx.drawImage(event.data, 0, 0);\n    //         document.body.appendChild(newCanvas);\n    //     }\n    // });\n\n    // let ctx = offscreenCanvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D;\n    // ctx.fillStyle = \"red\";\n    // ctx.fillRect(0,0,100,100);\n}\n\nmain()\n\nconsole.log(\"Main.ts done.\")\n"],
  "mappings": "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",
  "names": ["e", "signature"]
}
