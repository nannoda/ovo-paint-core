{
  "version": 3,
  "sources": ["src/submodules/common-ts-utils/WebWorker/CreateWorker.ts", "src/Documents/DocManager/DocManagerWorker.ts", "src/PaintTools/DotPen.ts", "src/Main.ts"],
  "sourcesContent": ["export function createWorkerFromFunction(workerFunction: () => void): Worker {\n    checkCompatibility();\n    const blob = new Blob(['(' + workerFunction.toString() + ')()'], {type: 'application/javascript'});\n    return new Worker(URL.createObjectURL(blob));\n}\n\nfunction checkCompatibility() {\n    if (window.Worker === undefined) {\n        throw new Error(\"Your browser does not support Web Workers.\");\n    }\n}\n", "// import {PaintTool} from \"../../PaintTools/PaintTool\";\nimport {PaintToolEvent} from \"../../PaintToolEvent\";\nimport {PaintTool} from \"../../PaintTools/PaintTool\";\n\ntype workerEventKey = \"setCanvas\" | \"setTool\" | \"toolOp\" | \"log\";\n\nexport interface DocWorkerEvent<T = any> {\n    key: workerEventKey;\n    data: T;\n}\n\nexport interface CanvasUpdateEvent {\n    canvas: OffscreenCanvas;\n}\n\nexport interface ToolUpdateEvent {\n    tool: string;\n}\n\nexport interface ToolOpEvent {\n    event: {\n        pos: Vec2;\n        button: number;\n        type: \"down\" | \"up\" | \"move\";\n        pressure: number;\n    };\n}\n\n\nexport function docManagerWorker() {\n    console.log(\"DocManagerWorker.ts\");\n\n    let canvas: OffscreenCanvas;\n    let ctx: OffscreenCanvasRenderingContext2D;\n\n    let tool: PaintTool;\n\n    self.onmessage = (messageEvent) => {\n        let workerEvent = messageEvent.data as DocWorkerEvent;\n        // console.log(\"DocManagerWorker.ts got message: \" + workerEvent.key);\n        switch (workerEvent.key) {\n            case \"setCanvas\":\n                let canvasUpdateEvent = workerEvent.data as CanvasUpdateEvent;\n                canvas = canvasUpdateEvent.canvas;\n                ctx = canvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D;\n                break;\n            case \"setTool\":\n                let toolUpdateEvent = workerEvent.data as ToolUpdateEvent;\n                tool = self.eval('new (' + toolUpdateEvent.tool + ')') as PaintTool;\n                // tool.onMove({\n                //     pos: [0,0],\n                //     button: 0,\n                //     type: \"move\",\n                //     pressure: 0,\n                //     canvas: canvas,\n                //     ctx: ctx,\n                //     extra: {},\n                // })\n                // // tool = toolUpdateEvent.tool;\n                console.log(\"DocManagerWorker.ts got tool: \" + toolUpdateEvent.tool)\n                break;\n            case \"toolOp\":\n                let toolOpEvent = workerEvent.data as ToolOpEvent;\n                let paintToolEvent: PaintToolEvent = {\n                    pos: toolOpEvent.event.pos,\n                    button: toolOpEvent.event.button,\n                    type: toolOpEvent.event.type,\n                    pressure: toolOpEvent.event.pressure,\n                    canvas: canvas,\n                    ctx: ctx,\n                    extra: {},\n                }\n                tool.onMove(paintToolEvent);\n                break;\n            case \"log\":\n                console.log(workerEvent.data);\n                console.log(canvas);\n                console.log(tool);\n                break;\n            default:\n                console.log(\"DocManagerWorker.ts got unknown message: \" + workerEvent.key);\n        }\n    }\n}\n", "import {PaintTool} from \"./PaintTool\";\nimport {PaintToolEvent} from \"../PaintToolEvent\";\n\nexport class DotPen implements PaintTool{\n    onMove(e: PaintToolEvent) {\n        const ctx = e.ctx;\n        ctx.fillStyle = \"black\";\n        ctx.beginPath();\n        ctx.arc(e.pos[0], e.pos[1], 5, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n    onDown(e: PaintToolEvent): void {\n    }\n\n    onUp(e: PaintToolEvent): void {\n    }\n}\n", "import {workerFunction} from \"./Worker\";\nimport {createWorkerFromFunction} from \"./submodules/common-ts-utils/WebWorker/CreateWorker\";\nimport {\n    CanvasUpdateEvent,\n    docManagerWorker,\n    DocWorkerEvent, ToolOpEvent,\n    ToolUpdateEvent\n} from \"./Documents/DocManager/DocManagerWorker\";\nimport {DotPen} from \"./PaintTools/DotPen\";\n\nconsole.log(\"Main.ts\");\n\n\nfunction main() {\n    let htmlCanvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    htmlCanvas.width = 4000;\n    htmlCanvas.height = 2000;\n    let offscreenCanvas = htmlCanvas.transferControlToOffscreen();\n\n    let worker = createWorkerFromFunction(docManagerWorker);\n    worker.onmessage = (event) => {\n        console.log(\"Main.ts got message: \" + event.data);\n    }\n    let canvasEvent: CanvasUpdateEvent = {\n        canvas: offscreenCanvas\n    }\n\n    let docWorkerEvent: DocWorkerEvent = {\n        key: \"setCanvas\",\n        data: canvasEvent\n    }\n\n    worker.addEventListener(\"message\", (event) => {\n        console.log(\"LOL\")\n    });\n\n    worker.postMessage(docWorkerEvent, [offscreenCanvas]);\n\n    function objectToStr(obj: any): string {\n        return obj[\"constructor\"].toString();\n    }\n\n    let pen = new DotPen();\n\n    let penConstructorStr = objectToStr(pen);\n\n    let toolEvent: ToolUpdateEvent = {\n        tool: penConstructorStr\n    }\n\n    console.log(penConstructorStr);\n\n    docWorkerEvent = {\n        key: \"setTool\",\n        data: toolEvent\n    }\n\n    worker.postMessage(docWorkerEvent);\n\n    docWorkerEvent = {\n        key: \"log\",\n        data: \"nothing\"\n    }\n    worker.postMessage(docWorkerEvent)\n\n    function methodsToStringDict(method: any) {\n        let dict: any = {};\n        for (let key of Object.getOwnPropertyNames(Object.getPrototypeOf(method))) {\n            dict[key] = method[key].toString();\n        }\n        return dict;\n    }\n\n    // get all methods from pen\n    let penDict = methodsToStringDict(pen);\n    let methods = Object.getOwnPropertyNames(Object.getPrototypeOf(pen));\n\n    console.log(pen[\"onMove\"].toString())\n    console.log(penDict);\n\n\n    htmlCanvas.addEventListener(\"pointermove\", (event) => {\n        let toolOpEvent: ToolOpEvent = {\n            event: {\n                pos: [event.offsetX, event.offsetY],\n                button: event.button,\n                type: \"move\",\n                pressure: event.pressure\n            }\n        }\n\n        docWorkerEvent = {\n            key: \"toolOp\",\n            data: toolOpEvent\n        }\n\n        worker.postMessage(docWorkerEvent);\n\n        // let ctx = offscreenCanvas.getContext(\"2d\") as OffscreenCanvasRenderingContext2D;\n        // ctx.fillStyle = \"red\";\n        // ctx.fillRect(event.offsetX, event.offsetY, 10, 10);\n\n\n    })\n    //\n    // let toolEvent:ToolUpdateEvent = {\n    //     tool: pen\n    // }\n    //\n    // docWorkerEvent = {\n    //     key: \"updateTool\",\n    //     data: toolEvent\n    // }\n    //\n    // worker.postMessage(docWorkerEvent)\n    //\n    // let toolOpEvent:ToolOpEvent = {\n    //     event: {\n    //         pos: [0, 0],\n    //         button: 0,\n    //         type: \"move\",\n    //         pressure: 10\n    //     }\n    // }\n    //\n    // docWorkerEvent = {\n    //     key: \"toolOp\",\n    //     data: toolOpEvent\n    // }\n    //\n    // worker.postMessage(docWorkerEvent);\n}\n\nmain()\n\nconsole.log(\"Main.ts done.\")\n"],
  "mappings": "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",
  "names": []
}
